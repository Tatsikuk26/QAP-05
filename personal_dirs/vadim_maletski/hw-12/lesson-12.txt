 # Что такое тестирование ПО?
 
Испытание работы ПО, проверка его поведения на ожидаемый и реальный результат.
-----------------------------------------------------------------------------------
 
 # Этапы SDLC, что значит каждый из них?
 
Жизненный цикл разработки ПО.
1. Анализ требований - отвечает на вопрос «Какие проблемы требуют решений?»
2. Планирование - отвечает на вопрос «Что мы хотим сделать?»
3. Проектирование и дизайн - отвечает на вопрос «Как мы добьемся наших целей?»
4. Разработка ПО - процесс создания продукта.
5. Тестирование - обеспечение качественной работы продукта.
6. Развертывание - использование финального продукта.
-----------------------------------------------------------------------------------

 # Какие этапы тестирования вы можете перечислить?
 
1. Работа с требованиями.
   Знакомство с требованиями заказчика, что должен из себя представлять
   итоговый продукт, обсуждение.
  
2. Разработка стратегии тестирования.
   Оценка сроков тестирования, выявление среды тестирования,
   объединение всей информации, полученной при работе с требованиями.
  
3. Создание тестовой документации.
   Написание сценариев, которые позволят проверить функционал.
  
4. Тестирование прототипа.
   Тестирование основного функционала продукта,
   корректировка целей, добавление фичей.
  
5. Основное тестирование.
   Выполнение общей проверки продукта.
  
6. Стабилизация.
   Устранением багов.
  
7. Эксплуатация.
   Проводится регресс-тестирование, устранение ошибок,
   которые нашел конечный пользователь.
-----------------------------------------------------------------------------------
 
 # Что такое регрессионное тестирование?
 
Обнаружение дефектов в уже протестированных участках приложения.
Задача – убедиться, что исправление одних багов не стало
причиной возникновения других и что обновление билда
не создало новых дефектов в уже проверенном коде.
-----------------------------------------------------------------------------------
 
 # Что такое смоук тест?
 
Тестирование, проводимое на начальном этапе.
Это короткий цикл тестов. Данный тип тестирования позволяет на начальном этапе
выявить основные быстро находимые критические дефекты.
Такие тесты практически всегда одинаковы - целесообразно будет их автоматизировать.


-----------------------------------------------------------------------------------
 
 # Какие уровни тестирования вы знаете? Что тестируется на каждом из них?

1. Компонентное или Модульное тестирование
Проверка функциональности и поиск дефектов в частях приложения(модули программ, объекты, классы, функции и т.д.).

2. Интеграционное тестирование
Проверка связи между компонентами, а также взаимодействия с различными частями системы
(операционной системой, борудованием либо связи между различными системами).

3. Системное тестирование
Проверка как функциональных и не функциональных требований в системе в целом.
При этом выявляются дефекты, такие как неверное использование ресурсов системы,
несовместимость, неверная функциональность, неудобство использования и т.д.

4. Приемочное тестирование
Проверка на соответствие системы требованиям:
  - удовлетворяет ли система приемочным критериям;
  - решение заказчика: принимается приложение или нет.

-----------------------------------------------------------------------------------
 
 # Расскажите об основных особенностях Agile методологии (кратко).
 
Agile методологии позволяет быстро адаптировать продукт к меняющимся
требованиям рынка. Тестирование происходит одновременно с разработкой.
Каждая итерация завершает своё собственное тестирование,
что позволяет проводить регрессионное тестирование каждый раз,
когда выпускаются новые функции или логика.
Никаких задержек между кодированием и тестированием.



-----------------------------------------------------------------------------------
 # Какими характеристиками должны обладать хорошие требования?
 
1. Недвусмысленность – должна существовать только одна трактовка требования. 

2. Проверяемость – тестировщики должны иметь возможность проверить
   правильно ли требование реализовано в системе.

3. Чёткость – требование не должно содержать лишней информации.
   Оно должно быть изложено кратко и просто.

4. Точность – требование должно содержать в себе истинные факты.

5. Понятность – требование не должно содержать грамматических ошибок,
   должно быть изложено последовательно.

6. Осуществимость – требование должно быть выполнимо в рамках
   существующих ограничений (время, деньги, существующие ресурсы)

7. Независимость – для понимания требования
   не нужно знать других требований.
   
8. Атомарность – требование должно содержать одну связанную сущность,
   т.е. дальше нельзя разбить или уточнить.

9. Необходимость – заинтересованные лица должны нуждаться в данном требовании.

10. Абстрактность – в требовании не должно содержаться информации
    о том как оно будет реализовано.